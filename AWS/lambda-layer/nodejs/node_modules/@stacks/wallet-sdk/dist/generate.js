"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateNewAccount = exports.generateWallet = exports.generateSecretKey = void 0;
const bip39_1 = require("@scure/bip39");
const english_1 = require("@scure/bip39/wordlists/english");
const bip32_1 = require("@scure/bip32");
const common_1 = require("./models/common");
const encryption_1 = require("./encryption");
const derive_1 = require("./derive");
const _1 = require(".");
const common_2 = require("@stacks/common");
const generateSecretKey = (entropy = 256) => {
    const secretKey = (0, bip39_1.generateMnemonic)(english_1.wordlist, entropy);
    return secretKey;
};
exports.generateSecretKey = generateSecretKey;
const generateWallet = async ({ secretKey, password, }) => {
    const ciphertextBytes = await (0, encryption_1.encrypt)(secretKey, password);
    const encryptedSecretKey = (0, common_2.bytesToHex)(ciphertextBytes);
    const rootPrivateKey = await (0, bip39_1.mnemonicToSeed)(secretKey);
    const rootNode = bip32_1.HDKey.fromMasterSeed(rootPrivateKey);
    const walletKeys = await (0, derive_1.deriveWalletKeys)(rootNode);
    const wallet = {
        ...walletKeys,
        encryptedSecretKey,
        accounts: [],
        config: {
            accounts: [],
        },
    };
    return (0, exports.generateNewAccount)(wallet);
};
exports.generateWallet = generateWallet;
const generateNewAccount = (wallet) => {
    const accountIndex = wallet.accounts.length;
    const newAccount = (0, derive_1.deriveAccount)({
        rootNode: (0, common_1.getRootNode)(wallet),
        index: accountIndex,
        salt: wallet.salt,
        stxDerivationType: _1.DerivationType.Wallet,
    });
    return {
        ...wallet,
        accounts: [...wallet.accounts, newAccount],
    };
};
exports.generateNewAccount = generateNewAccount;
//# sourceMappingURL=generate.js.map