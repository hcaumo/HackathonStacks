import { HDKey } from '@scure/bip32';
import { StacksNetwork } from '@stacks/network';
import { Account, WalletKeys } from './models/common';
export declare const deriveWalletKeys: (rootNode: HDKey) => Promise<WalletKeys>;
export declare const deriveConfigPrivateKey: (rootNode: HDKey) => Uint8Array;
export declare const deriveLegacyConfigPrivateKey: (rootNode: HDKey) => string;
export declare const deriveSalt: (rootNode: HDKey) => Promise<string>;
export declare enum DerivationType {
    Wallet = 0,
    Data = 1,
    Unknown = 2
}
export declare const selectStxDerivation: ({ username, rootNode, index, network, }: {
    username?: string | undefined;
    rootNode: HDKey;
    index: number;
    network?: StacksNetwork | undefined;
}) => Promise<{
    username: string | undefined;
    stxDerivationType: DerivationType;
}>;
export declare const fetchUsernameForAccountByDerivationType: ({ rootNode, index, derivationType, network, }: {
    rootNode: HDKey;
    index: number;
    derivationType: DerivationType.Wallet | DerivationType.Data;
    network?: StacksNetwork | undefined;
}) => Promise<{
    username: string | undefined;
}>;
export declare const derivePrivateKeyByType: ({ rootNode, index, derivationType, }: {
    rootNode: HDKey;
    index: number;
    derivationType: DerivationType;
}) => string;
export declare const deriveStxPrivateKey: ({ rootNode, index }: {
    rootNode: HDKey;
    index: number;
}) => string;
export declare const deriveDataPrivateKey: ({ rootNode, index }: {
    rootNode: HDKey;
    index: number;
}) => string;
export declare const deriveAccount: ({ rootNode, index, salt, stxDerivationType, }: {
    rootNode: HDKey;
    index: number;
    salt: string;
    stxDerivationType: DerivationType.Wallet | DerivationType.Data;
}) => Account;
