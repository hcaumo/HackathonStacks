import { decryptContent } from '@stacks/encryption';
import { createFetchFn } from '@stacks/network';
import { deriveLegacyConfigPrivateKey } from '../derive';
import { getRootNode } from './common';
export async function fetchLegacyWalletConfig({ wallet, gaiaHubConfig, fetchFn = createFetchFn(), }) {
    const rootNode = getRootNode(wallet);
    const legacyConfigKey = deriveLegacyConfigPrivateKey(rootNode);
    try {
        const response = await fetchFn(`${gaiaHubConfig.url_prefix}${gaiaHubConfig.address}/wallet-config.json`);
        if (!response.ok)
            return null;
        const encrypted = await response.text();
        const configJSON = (await decryptContent(encrypted, {
            privateKey: legacyConfigKey,
        }));
        const config = JSON.parse(configJSON);
        return config;
    }
    catch (error) {
        console.error(error);
        return null;
    }
}
//# sourceMappingURL=legacy-wallet-config.js.map