"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.triplesecDecrypt = void 0;
const triplesec = __importStar(require("triplesec"));
function triplesecDecrypt(arg, cb) {
    if (typeof Buffer === 'undefined')
        throw Error('Using triplesec currently requires polyfilling `Buffer`');
    const argBuffer = {
        data: Buffer.from(arg.data),
        key: Buffer.from(arg.key),
    };
    return triplesec.decrypt(argBuffer, (err, buff) => {
        return cb(err, buff ? new Uint8Array(buff.buffer) : null);
    });
}
exports.triplesecDecrypt = triplesecDecrypt;
//# sourceMappingURL=triplesec.js.map