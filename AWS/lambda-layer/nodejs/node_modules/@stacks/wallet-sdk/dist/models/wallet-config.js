"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateWalletConfigWithApp = exports.encryptWalletConfig = exports.makeWalletConfig = exports.updateWalletConfig = exports.fetchWalletConfig = exports.getOrCreateWalletConfig = exports.createWalletGaiaConfig = void 0;
const storage_1 = require("@stacks/storage");
const encryption_1 = require("@stacks/encryption");
const network_1 = require("@stacks/network");
const createWalletGaiaConfig = async ({ gaiaHubUrl, wallet, }) => {
    return (0, storage_1.connectToGaiaHub)(gaiaHubUrl, wallet.configPrivateKey);
};
exports.createWalletGaiaConfig = createWalletGaiaConfig;
const getOrCreateWalletConfig = async ({ wallet, gaiaHubConfig, skipUpload, fetchFn = (0, network_1.createFetchFn)(), }) => {
    const config = await (0, exports.fetchWalletConfig)({ wallet, gaiaHubConfig, fetchFn });
    if (config)
        return config;
    const newConfig = makeWalletConfig(wallet);
    if (!skipUpload) {
        await (0, exports.updateWalletConfig)({ wallet, gaiaHubConfig });
    }
    return newConfig;
};
exports.getOrCreateWalletConfig = getOrCreateWalletConfig;
const fetchWalletConfig = async ({ wallet, gaiaHubConfig, fetchFn = (0, network_1.createFetchFn)(), }) => {
    try {
        const response = await fetchFn(`${gaiaHubConfig.url_prefix}${gaiaHubConfig.address}/wallet-config.json`);
        if (!response.ok)
            return null;
        const encrypted = await response.text();
        const configJSON = (await (0, encryption_1.decryptContent)(encrypted, {
            privateKey: wallet.configPrivateKey,
        }));
        const config = JSON.parse(configJSON);
        return config;
    }
    catch (error) {
        console.error(error);
        return null;
    }
};
exports.fetchWalletConfig = fetchWalletConfig;
const updateWalletConfig = async ({ wallet, walletConfig: _walletConfig, gaiaHubConfig, }) => {
    const walletConfig = _walletConfig || makeWalletConfig(wallet);
    const encrypted = await (0, exports.encryptWalletConfig)({ wallet, walletConfig });
    await (0, storage_1.uploadToGaiaHub)('wallet-config.json', encrypted, gaiaHubConfig, undefined, undefined, undefined, true);
    return walletConfig;
};
exports.updateWalletConfig = updateWalletConfig;
function makeWalletConfig(wallet) {
    return {
        accounts: wallet.accounts.map(account => ({
            username: account.username,
            apps: {},
        })),
    };
}
exports.makeWalletConfig = makeWalletConfig;
const encryptWalletConfig = async ({ wallet, walletConfig, }) => {
    const publicKey = (0, encryption_1.getPublicKeyFromPrivate)(wallet.configPrivateKey);
    const encrypted = await (0, encryption_1.encryptContent)(JSON.stringify(walletConfig), { publicKey });
    return encrypted;
};
exports.encryptWalletConfig = encryptWalletConfig;
const updateWalletConfigWithApp = async ({ wallet, account, app, gaiaHubConfig, walletConfig, }) => {
    wallet.accounts.forEach((account, index) => {
        const configApp = walletConfig.accounts[index];
        if (configApp) {
            configApp.apps = configApp.apps || {};
            configApp.username = account.username;
            walletConfig.accounts[index] = configApp;
        }
        else {
            walletConfig.accounts.push({
                username: account.username,
                apps: {},
            });
        }
    });
    const configAccount = walletConfig.accounts[account.index];
    configAccount.apps = configAccount.apps || {};
    configAccount.apps[app.origin] = app;
    walletConfig.accounts[account.index] = configAccount;
    await (0, exports.updateWalletConfig)({ wallet, walletConfig: walletConfig, gaiaHubConfig });
    return walletConfig;
};
exports.updateWalletConfigWithApp = updateWalletConfigWithApp;
//# sourceMappingURL=wallet-config.js.map