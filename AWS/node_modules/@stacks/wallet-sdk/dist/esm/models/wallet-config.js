import { connectToGaiaHub, uploadToGaiaHub } from '@stacks/storage';
import { decryptContent, encryptContent, getPublicKeyFromPrivate } from '@stacks/encryption';
import { createFetchFn } from '@stacks/network';
export const createWalletGaiaConfig = async ({ gaiaHubUrl, wallet, }) => {
    return connectToGaiaHub(gaiaHubUrl, wallet.configPrivateKey);
};
export const getOrCreateWalletConfig = async ({ wallet, gaiaHubConfig, skipUpload, fetchFn = createFetchFn(), }) => {
    const config = await fetchWalletConfig({ wallet, gaiaHubConfig, fetchFn });
    if (config)
        return config;
    const newConfig = makeWalletConfig(wallet);
    if (!skipUpload) {
        await updateWalletConfig({ wallet, gaiaHubConfig });
    }
    return newConfig;
};
export const fetchWalletConfig = async ({ wallet, gaiaHubConfig, fetchFn = createFetchFn(), }) => {
    try {
        const response = await fetchFn(`${gaiaHubConfig.url_prefix}${gaiaHubConfig.address}/wallet-config.json`);
        if (!response.ok)
            return null;
        const encrypted = await response.text();
        const configJSON = (await decryptContent(encrypted, {
            privateKey: wallet.configPrivateKey,
        }));
        const config = JSON.parse(configJSON);
        return config;
    }
    catch (error) {
        console.error(error);
        return null;
    }
};
export const updateWalletConfig = async ({ wallet, walletConfig: _walletConfig, gaiaHubConfig, }) => {
    const walletConfig = _walletConfig || makeWalletConfig(wallet);
    const encrypted = await encryptWalletConfig({ wallet, walletConfig });
    await uploadToGaiaHub('wallet-config.json', encrypted, gaiaHubConfig, undefined, undefined, undefined, true);
    return walletConfig;
};
export function makeWalletConfig(wallet) {
    return {
        accounts: wallet.accounts.map(account => ({
            username: account.username,
            apps: {},
        })),
    };
}
export const encryptWalletConfig = async ({ wallet, walletConfig, }) => {
    const publicKey = getPublicKeyFromPrivate(wallet.configPrivateKey);
    const encrypted = await encryptContent(JSON.stringify(walletConfig), { publicKey });
    return encrypted;
};
export const updateWalletConfigWithApp = async ({ wallet, account, app, gaiaHubConfig, walletConfig, }) => {
    wallet.accounts.forEach((account, index) => {
        const configApp = walletConfig.accounts[index];
        if (configApp) {
            configApp.apps = configApp.apps || {};
            configApp.username = account.username;
            walletConfig.accounts[index] = configApp;
        }
        else {
            walletConfig.accounts.push({
                username: account.username,
                apps: {},
            });
        }
    });
    const configAccount = walletConfig.accounts[account.index];
    configAccount.apps = configAccount.apps || {};
    configAccount.apps[app.origin] = app;
    walletConfig.accounts[account.index] = configAccount;
    await updateWalletConfig({ wallet, walletConfig: walletConfig, gaiaHubConfig });
    return walletConfig;
};
//# sourceMappingURL=wallet-config.js.map