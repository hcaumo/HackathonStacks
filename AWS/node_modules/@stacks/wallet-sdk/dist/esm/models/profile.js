import { getPublicKeyFromPrivate } from '@stacks/encryption';
import { createFetchFn } from '@stacks/network';
import { signProfileToken, wrapProfileToken, } from '@stacks/profile';
import { connectToGaiaHub, uploadToGaiaHub } from '@stacks/storage';
import { getProfileURLFromZoneFile } from '../utils';
import { getGaiaAddress } from './common';
export const DEFAULT_PROFILE = {
    '@type': 'Person',
    '@context': 'http://schema.org',
};
export const DEFAULT_PROFILE_FILE_NAME = 'profile.json';
export const fetchProfileFromUrl = async (profileUrl, fetchFn = createFetchFn()) => {
    try {
        const res = await fetchFn(profileUrl);
        if (res.ok) {
            const json = await res.json();
            const { decodedToken } = json[0];
            return decodedToken.payload?.claim;
        }
        if (res.status === 404)
            return null;
        throw new Error('Network error when fetching profile');
    }
    catch (error) {
        return null;
    }
};
export const fetchAccountProfileUrl = async ({ account, gaiaHubUrl, }) => {
    if (account.username) {
        try {
            const url = await getProfileURLFromZoneFile(account.username);
            if (url)
                return url;
        }
        catch (error) {
            if (process.env.NODE_ENV !== 'test') {
                console.warn('Error fetching profile URL from zone file:', error);
            }
        }
    }
    return `${gaiaHubUrl}${getGaiaAddress(account)}/profile.json`;
};
export function signProfileForUpload({ profile, account, }) {
    const privateKey = account.stxPrivateKey;
    const publicKey = getPublicKeyFromPrivate(privateKey.slice(0, 64));
    const token = signProfileToken(profile, privateKey, { publicKey });
    const tokenRecord = wrapProfileToken(token);
    const tokenRecords = [tokenRecord];
    return JSON.stringify(tokenRecords, null, 2);
}
export async function uploadProfile({ gaiaHubUrl, account, signedProfileTokenData, gaiaHubConfig, }) {
    const identityHubConfig = gaiaHubConfig || (await connectToGaiaHub(gaiaHubUrl, account.dataPrivateKey));
    await uploadToGaiaHub(DEFAULT_PROFILE_FILE_NAME, signedProfileTokenData, identityHubConfig, undefined, undefined, undefined, true);
}
export const signAndUploadProfile = async ({ profile, gaiaHubUrl, account, gaiaHubConfig, }) => {
    const signedProfileTokenData = signProfileForUpload({ profile, account });
    await uploadProfile({ gaiaHubUrl, account, signedProfileTokenData, gaiaHubConfig });
};
//# sourceMappingURL=profile.js.map