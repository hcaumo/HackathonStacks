import { DerivationType, deriveStxPrivateKey, fetchUsernameForAccountByDerivationType } from '..';
import { deriveAccount, deriveLegacyConfigPrivateKey } from '../derive';
import { connectToGaiaHubWithConfig, getHubInfo } from '../utils';
import { getRootNode } from './common';
import { fetchLegacyWalletConfig } from './legacy-wallet-config';
import { fetchWalletConfig, updateWalletConfig } from './wallet-config';
export async function restoreWalletAccounts({ wallet, gaiaHubUrl, network, }) {
    const hubInfo = await getHubInfo(gaiaHubUrl, network.fetchFn);
    const rootNode = getRootNode(wallet);
    const legacyGaiaConfig = connectToGaiaHubWithConfig({
        hubInfo,
        privateKey: deriveLegacyConfigPrivateKey(getRootNode(wallet)),
        gaiaHubUrl,
    });
    const currentGaiaConfig = connectToGaiaHubWithConfig({
        hubInfo,
        privateKey: wallet.configPrivateKey,
        gaiaHubUrl,
    });
    const [walletConfig, legacyWalletConfig] = await Promise.all([
        fetchWalletConfig({ wallet, gaiaHubConfig: currentGaiaConfig, fetchFn: network.fetchFn }),
        fetchLegacyWalletConfig({ wallet, gaiaHubConfig: legacyGaiaConfig, fetchFn: network.fetchFn }),
    ]);
    if (walletConfig &&
        walletConfig.accounts.length >= (legacyWalletConfig?.identities.length || 0)) {
        const newAccounts = await Promise.all(walletConfig.accounts.map(async (_, index) => {
            let existingAccount = wallet.accounts[index];
            const { username } = await fetchUsernameForAccountByDerivationType({
                rootNode,
                index,
                derivationType: DerivationType.Wallet,
                network,
            });
            if (!existingAccount) {
                existingAccount = deriveAccount({
                    rootNode,
                    index,
                    salt: wallet.salt,
                    stxDerivationType: DerivationType.Wallet,
                });
            }
            else {
                existingAccount = {
                    ...existingAccount,
                    stxPrivateKey: deriveStxPrivateKey({
                        rootNode,
                        index,
                    }),
                };
            }
            return {
                ...existingAccount,
                username,
            };
        }));
        return {
            ...wallet,
            accounts: newAccounts,
        };
    }
    if (legacyWalletConfig) {
        const newAccounts = await Promise.all(legacyWalletConfig.identities.map(async (_, index) => {
            let existingAccount = wallet.accounts[index];
            const { username } = await fetchUsernameForAccountByDerivationType({
                rootNode,
                index,
                derivationType: DerivationType.Wallet,
                network,
            });
            if (!existingAccount) {
                existingAccount = deriveAccount({
                    rootNode,
                    index,
                    salt: wallet.salt,
                    stxDerivationType: DerivationType.Wallet,
                });
            }
            else {
                existingAccount = {
                    ...existingAccount,
                    stxPrivateKey: deriveStxPrivateKey({
                        rootNode,
                        index,
                    }),
                };
            }
            return {
                ...existingAccount,
                username,
            };
        }));
        const meta = {};
        if (legacyWalletConfig.hideWarningForReusingIdentity) {
            meta.hideWarningForReusingIdentity = true;
        }
        const newConfig = {
            accounts: legacyWalletConfig.identities.map(identity => ({
                username: identity.username,
                apps: identity.apps,
            })),
            meta,
        };
        await updateWalletConfig({
            wallet,
            walletConfig: newConfig,
            gaiaHubConfig: currentGaiaConfig,
        });
        return {
            ...wallet,
            accounts: newAccounts,
        };
    }
    return wallet;
}
//# sourceMappingURL=wallet.js.map