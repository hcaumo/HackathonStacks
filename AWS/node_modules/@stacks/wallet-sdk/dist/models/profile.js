"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signAndUploadProfile = exports.uploadProfile = exports.signProfileForUpload = exports.fetchAccountProfileUrl = exports.fetchProfileFromUrl = exports.DEFAULT_PROFILE_FILE_NAME = exports.DEFAULT_PROFILE = void 0;
const encryption_1 = require("@stacks/encryption");
const network_1 = require("@stacks/network");
const profile_1 = require("@stacks/profile");
const storage_1 = require("@stacks/storage");
const utils_1 = require("../utils");
const common_1 = require("./common");
exports.DEFAULT_PROFILE = {
    '@type': 'Person',
    '@context': 'http://schema.org',
};
exports.DEFAULT_PROFILE_FILE_NAME = 'profile.json';
const fetchProfileFromUrl = async (profileUrl, fetchFn = (0, network_1.createFetchFn)()) => {
    try {
        const res = await fetchFn(profileUrl);
        if (res.ok) {
            const json = await res.json();
            const { decodedToken } = json[0];
            return decodedToken.payload?.claim;
        }
        if (res.status === 404)
            return null;
        throw new Error('Network error when fetching profile');
    }
    catch (error) {
        return null;
    }
};
exports.fetchProfileFromUrl = fetchProfileFromUrl;
const fetchAccountProfileUrl = async ({ account, gaiaHubUrl, }) => {
    if (account.username) {
        try {
            const url = await (0, utils_1.getProfileURLFromZoneFile)(account.username);
            if (url)
                return url;
        }
        catch (error) {
            if (process.env.NODE_ENV !== 'test') {
                console.warn('Error fetching profile URL from zone file:', error);
            }
        }
    }
    return `${gaiaHubUrl}${(0, common_1.getGaiaAddress)(account)}/profile.json`;
};
exports.fetchAccountProfileUrl = fetchAccountProfileUrl;
function signProfileForUpload({ profile, account, }) {
    const privateKey = account.stxPrivateKey;
    const publicKey = (0, encryption_1.getPublicKeyFromPrivate)(privateKey.slice(0, 64));
    const token = (0, profile_1.signProfileToken)(profile, privateKey, { publicKey });
    const tokenRecord = (0, profile_1.wrapProfileToken)(token);
    const tokenRecords = [tokenRecord];
    return JSON.stringify(tokenRecords, null, 2);
}
exports.signProfileForUpload = signProfileForUpload;
async function uploadProfile({ gaiaHubUrl, account, signedProfileTokenData, gaiaHubConfig, }) {
    const identityHubConfig = gaiaHubConfig || (await (0, storage_1.connectToGaiaHub)(gaiaHubUrl, account.dataPrivateKey));
    await (0, storage_1.uploadToGaiaHub)(exports.DEFAULT_PROFILE_FILE_NAME, signedProfileTokenData, identityHubConfig, undefined, undefined, undefined, true);
}
exports.uploadProfile = uploadProfile;
const signAndUploadProfile = async ({ profile, gaiaHubUrl, account, gaiaHubConfig, }) => {
    const signedProfileTokenData = signProfileForUpload({ profile, account });
    await uploadProfile({ gaiaHubUrl, account, signedProfileTokenData, gaiaHubConfig });
};
exports.signAndUploadProfile = signAndUploadProfile;
//# sourceMappingURL=profile.js.map